var helpers = require("../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  require('./style.css');
  var _hooksUseFetch = require("../hooks/useFetch");
  var _d = require('d3');
  var _jsxFileName = "/Users/claytonnovotney/Desktop/UW/Spring2021/Info474/Info474Assignment3/src/D3TestingClay.js", _s = $RefreshSig$();
  function D3TestingClay() {
    _s();
    const dataByYearURL = "https://raw.githubusercontent.com/Info474Sp21/Info474Assignment3/main/data/data_by_year_o.csv";
    const [fetchData, loading] = _hooksUseFetch.useFetch(dataByYearURL);
    const margin = 200;
    const width = 1000 - 2 * margin;
    const height = 600 - 2 * margin;
    const svg = _d.select('svg');
    const chart = svg.append('g').attr('transform', `translate(${margin}, ${margin})`);
    const yScale = _d.scaleLinear().range([height, 0]).domain([0, 275000]);
    chart.append('g').call(_d.axisLeft(yScale));
    const xScale = _d.scaleBand().range([0, width]).domain([1920, 2020]).padding(0.2);
    chart.append('g').attr('transform', `translate(0, ${height})`).call(_d.axisBottom(xScale));
    // chart.selectAll()
    // .data(fetchData)
    // .enter()
    // .append('rect')
    // .attr('x', (s) => xScale(s.year))
    // .attr('y', (s) => yScale(s.duration_ms))
    // .attr('height', (s) => height - yScale(s.duration_ms))
    // .attr('width', xScale.bandwidth())
    // console.log(fetchData);
    // var svg = d3.select("svg"),
    // margin = 200,
    // width = svg.attr("width") - margin,
    // height = svg.attr("height") - margin;
    // var xScale = d3.scaleBand().range ([0, width]).padding(0.4),
    // yScale = d3.scaleLinear().range ([height, 0]);
    // var g = svg.append("g")
    // .attr("transform", "translate(" + 100 + "," + 100 + ")");
    // d3.csv("./data/data_by_year.csv", function(error, data) {
    // if (error) {
    // throw error;
    // }
    // xScale.domain(data.map(function(d) { return d.year; }));
    // yScale.domain([0, d3.max(data, function(d) { return d.popularity; })]);
    // g.append("g")
    // .attr("transform", "translate(0," + height + ")")
    // .call(d3.axisBottom(xScale));
    // g.append("g")
    // .call(d3.axisLeft(yScale).tickFormat(function(d){
    // return "$" + d;
    // }).ticks(10));
    // g.selectAll(".bar")
    // .data(data)
    // .enter().append("rect")
    // .attr("class", "bar")
    // .attr("x", function(d) { return xScale(d.year); })
    // .attr("y", function(d) { return yScale(d.popularity); })
    // .attr("width", xScale.bandwidth())
    // .attr("height", function(d) { return height - yScale(d.popularity); });
    // });
    return (
      /*#__PURE__*/_reactDefault.default.createElement("div", {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 73,
          columnNumber: 9
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("h1", {
        className: "centered",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 74,
          columnNumber: 13
        }
      }, "Testing D3 Implementation"), /*#__PURE__*/_reactDefault.default.createElement("svg", {
        id: "d3-barchart",
        width: "600",
        height: "500",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 75,
          columnNumber: 13
        }
      }))
    );
  }
  _s(D3TestingClay, "0ze5z7LqkkUwfzzjYzgIKoG3QDE=", false, function () {
    return [_hooksUseFetch.useFetch];
  });
  _c = D3TestingClay;
  exports.default = D3TestingClay;
  var _c;
  $RefreshReg$(_c, "D3TestingClay");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
