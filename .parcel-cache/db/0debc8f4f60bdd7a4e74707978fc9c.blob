var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function identity(x) {
  return x;
}
/**
 * Instead of a component for each orientation (like AxisLeft, AxisRight),
 * we provide a value from this Orient object. Provide a value, like
 * Orient.left, to the `orient` prop of the Axis component
 * to place the axis on the left.
 */


exports.Orient = void 0;

(function (Orient) {
  Orient[Orient["top"] = 1] = "top";
  Orient[Orient["right"] = 2] = "right";
  Orient[Orient["bottom"] = 3] = "bottom";
  Orient[Orient["left"] = 4] = "left";
})(exports.Orient || (exports.Orient = {}));

function translateX(x) {
  return "translate(" + x + ",0)";
}

function translateY(y) {
  return "translate(0," + y + ")";
}
/**
 * The axis component. This renders an axis, within a
 * `g` element, for use in a chart.
 */


const Axis = ({
  scale,
  ticks,
  tickArguments = [],
  tickValues = null,
  tickFormat = null,
  tickSize,
  tickSizeInner = 6,
  tickSizeOuter = 6,
  tickPadding = 3,
  tickTextProps = {},
  tickLineProps = {},
  domainPathProps = {},
  orient = exports.Orient.bottom,
  offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5
}) => {
  if (tickSize) {
    tickSizeInner = tickSize;
    tickSizeOuter = tickSize;
  }

  if (ticks) {
    tickArguments = ticks;
  }

  function number(scale) {
    return d => {
      const value = scale(d);
      return value === undefined ? 0 : +value;
    };
  }

  function center(scale, offset) {
    if (scale.bandwidth) {
      offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;
    }

    if (scale.round()) offset = Math.round(offset);
    return d => {
      const value = scale(d);
      return value === undefined ? 0 : value + offset;
    };
  }

  const k = orient === exports.Orient.top || orient === exports.Orient.left ? -1 : 1,
        x = orient === exports.Orient.left || orient === exports.Orient.right ? "x" : "y",
        transform = orient === exports.Orient.top || orient === exports.Orient.bottom ? translateX : translateY; // Rendering

  const values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues,
        format = tickFormat == null ? "tickFormat" in scale ? scale.tickFormat.apply(scale, tickArguments) : identity : tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,
        range = scale.range(),
        range0 = +range[0] + offset,
        range1 = +range[range.length - 1] + offset,
        position = (scale.bandwidth ? center : number)(scale.copy(), offset);
  const domainPath = orient === exports.Orient.left || orient === exports.Orient.right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1;
  const lineProps = {
    [x + "2"]: k * tickSizeInner
  };
  const textProps = {
    [x]: k * spacing
  };
  return /*#__PURE__*/React__default['default'].createElement("g", null, values.map((tick, i) => /*#__PURE__*/React__default['default'].createElement("g", {
    className: "tick",
    key: i,
    transform: transform(position(tick) + offset)
  }, tickLineProps && /*#__PURE__*/React__default['default'].createElement("line", _extends({
    stroke: "currentColor"
  }, lineProps, tickLineProps)), tickTextProps && /*#__PURE__*/React__default['default'].createElement("text", _extends({
    fill: "currentColor",
    dy: orient === exports.Orient.top ? "0em" : orient === exports.Orient.bottom ? "0.71em" : "0.32em",
    fontSize: "10",
    fontFamily: "sans-serif",
    textAnchor: orient === exports.Orient.right ? "start" : orient === exports.Orient.left ? "end" : "middle"
  }, textProps, tickTextProps), format(tick)))), domainPathProps && /*#__PURE__*/React__default['default'].createElement("path", _extends({
    className: "domain",
    stroke: "currentColor",
    fill: "transparent",
    d: domainPath
  }, domainPathProps)));
};

exports.Axis = Axis;
